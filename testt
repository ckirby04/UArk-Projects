import torch
import torch.nn as nn
from torch.utils.data import DataLoader, Dataset
import os
from PIL import Image
import torchvision.transforms as transforms

# === CONFIGURABLE PARAMETERS ===
model_path = "best_model.pth"
image_folder = "./images/"
threshold_percent_error = 20.0  # mark images with >20% error
output_filename = "high_error_images.txt"

# === DUMMY DATASET TEMPLATE (customize as needed) ===
class CustomImageDataset(Dataset):
    def __init__(self, image_folder):
        self.image_folder = image_folder
        self.image_files = sorted(os.listdir(image_folder))  # filenames = ground truth
        self.transform = transforms.Compose([
            transforms.Resize((345, 600)),  # resize if necessary
            transforms.ToTensor()
        ])
    
    def __len__(self):
        return len(self.image_files)
    
    def __getitem__(self, idx):
        filename = self.image_files[idx]
        path = os.path.join(self.image_folder, filename)
        image = Image.open(path).convert("RGB")
        image = self.transform(image)
        label = float(os.path.splitext(filename)[0])  # e.g., "0.02034.jpg" -> 0.02034
        return image, label, filename

# === LOAD MODEL ===
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = torch.load(model_path)
model.eval()
model.to(device)

# === EVALUATION LOOP ===
dataset = CustomImageDataset(image_folder)
loader = DataLoader(dataset, batch_size=1)

high_error_files = []

with torch.no_grad():
    for xb, y_true, filename in loader:
        xb = xb.to(device)
        y_true = y_true.to(device).view(-1, 1)

        y_pred = model(xb)
        error_pct = (torch.abs((y_pred - y_true) / (y_true + 1e-8)) * 100).item()

        if error_pct > threshold_percent_error:
            high_error_files.append(f"{filename[0]} - Error: {error_pct:.2f}%")

# === SAVE RESULTS ===
with open(output_filename, "w") as f:
    f.write("\n".join(high_error_files))

print(f"Saved {len(high_error_files)} high-error images to {output_filename}")