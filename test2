def train_epoch(model, loader, optimizer, criterion, device, y_mean, y_std):
    model.train()
    total_loss, total_mae, total_mape, total_acc = 0, 0, 0, 0

    for xb, yb in loader:
        xb, yb = xb.to(device), yb.to(device)

        optimizer.zero_grad()
        preds = model(xb)

        # Compute loss in normalized space
        loss = criterion(preds, yb)
        loss.backward()
        optimizer.step()

        # Denormalize predictions and targets for metrics
        preds_denorm = preds * y_std + y_mean
        yb_denorm = yb * y_std + y_mean

        mae = torch.mean(torch.abs(preds_denorm - yb_denorm)).item()
        mape = torch.mean(torch.abs((preds_denorm - yb_denorm) / (yb_denorm + 1e-8))).item() * 100
        acc_10 = torch.mean((torch.abs((preds_denorm - yb_denorm) / (yb_denorm + 1e-8)) < 0.10).float()).item()

        total_loss += loss.item()
        total_mae += mae
        total_mape += mape
        total_acc += acc_10

    n = len(loader)
    return total_loss / n, total_mae / n, total_mape / n, total_acc / n


def evaluate(model, loader, criterion, device, y_mean, y_std):
    model.eval()
    total_loss, total_mae, total_mape, total_acc = 0, 0, 0, 0

    with torch.no_grad():
        for xb, yb in loader:
            xb, yb = xb.to(device), yb.to(device)
            preds = model(xb)

            # Compute loss in normalized space
            loss = criterion(preds, yb)

            # Denormalize for metrics
            preds_denorm = preds * y_std + y_mean
            yb_denorm = yb * y_std + y_mean

            mae = torch.mean(torch.abs(preds_denorm - yb_denorm)).item()
            mape = torch.mean(torch.abs((preds_denorm - yb_denorm) / (yb_denorm + 1e-8))).item() * 100
            acc_10 = torch.mean((torch.abs((preds_denorm - yb_denorm) / (yb_denorm + 1e-8)) < 0.10).float()).item()

            total_loss += loss.item()
            total_mae += mae
            total_mape += mape
            total_acc += acc_10

    n = len(loader)
    return total_loss / n, total_mae / n, total_mape / n, total_acc / n



for epoch in range(1, 31):
    train_loss, train_mae, train_mape, train_acc = train_epoch(
        model, train_loader, optimizer, criterion, device, y_mean, y_std
    )
    val_loss, val_mae, val_mape, val_acc = evaluate(
        model, val_loader, criterion, device, y_mean, y_std
    )

    print(f"Epoch {epoch:02d} | Train MAE: {train_mae:.4f}, MAPE: {train_mape:.2f}%, Acc10: {train_acc:.2f} | "
          f"Val MAE: {val_mae:.4f}, MAPE: {val_mape:.2f}%, Acc10: {val_acc:.2f}")